// Code generated by go-swagger; DO NOT EDIT.

package tunnel_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/SilvanAbuse/guardllama/proto/gen/api/v1/swagger/models"
)

// TunnelServiceGetTunnelReader is a Reader for the TunnelServiceGetTunnel structure.
type TunnelServiceGetTunnelReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TunnelServiceGetTunnelReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTunnelServiceGetTunnelOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewTunnelServiceGetTunnelDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewTunnelServiceGetTunnelOK creates a TunnelServiceGetTunnelOK with default headers values
func NewTunnelServiceGetTunnelOK() *TunnelServiceGetTunnelOK {
	return &TunnelServiceGetTunnelOK{}
}

/*
TunnelServiceGetTunnelOK describes a response with status code 200, with default header values.

A successful response.
*/
type TunnelServiceGetTunnelOK struct {
	Payload *models.V1GetTunnelResponse
}

// IsSuccess returns true when this tunnel service get tunnel o k response has a 2xx status code
func (o *TunnelServiceGetTunnelOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this tunnel service get tunnel o k response has a 3xx status code
func (o *TunnelServiceGetTunnelOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this tunnel service get tunnel o k response has a 4xx status code
func (o *TunnelServiceGetTunnelOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this tunnel service get tunnel o k response has a 5xx status code
func (o *TunnelServiceGetTunnelOK) IsServerError() bool {
	return false
}

// IsCode returns true when this tunnel service get tunnel o k response a status code equal to that given
func (o *TunnelServiceGetTunnelOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the tunnel service get tunnel o k response
func (o *TunnelServiceGetTunnelOK) Code() int {
	return 200
}

func (o *TunnelServiceGetTunnelOK) Error() string {
	return fmt.Sprintf("[GET /tunnels/{name}][%d] tunnelServiceGetTunnelOK  %+v", 200, o.Payload)
}

func (o *TunnelServiceGetTunnelOK) String() string {
	return fmt.Sprintf("[GET /tunnels/{name}][%d] tunnelServiceGetTunnelOK  %+v", 200, o.Payload)
}

func (o *TunnelServiceGetTunnelOK) GetPayload() *models.V1GetTunnelResponse {
	return o.Payload
}

func (o *TunnelServiceGetTunnelOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1GetTunnelResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTunnelServiceGetTunnelDefault creates a TunnelServiceGetTunnelDefault with default headers values
func NewTunnelServiceGetTunnelDefault(code int) *TunnelServiceGetTunnelDefault {
	return &TunnelServiceGetTunnelDefault{
		_statusCode: code,
	}
}

/*
TunnelServiceGetTunnelDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type TunnelServiceGetTunnelDefault struct {
	_statusCode int

	Payload *models.RPCStatus
}

// IsSuccess returns true when this tunnel service get tunnel default response has a 2xx status code
func (o *TunnelServiceGetTunnelDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this tunnel service get tunnel default response has a 3xx status code
func (o *TunnelServiceGetTunnelDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this tunnel service get tunnel default response has a 4xx status code
func (o *TunnelServiceGetTunnelDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this tunnel service get tunnel default response has a 5xx status code
func (o *TunnelServiceGetTunnelDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this tunnel service get tunnel default response a status code equal to that given
func (o *TunnelServiceGetTunnelDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the tunnel service get tunnel default response
func (o *TunnelServiceGetTunnelDefault) Code() int {
	return o._statusCode
}

func (o *TunnelServiceGetTunnelDefault) Error() string {
	return fmt.Sprintf("[GET /tunnels/{name}][%d] TunnelService_GetTunnel default  %+v", o._statusCode, o.Payload)
}

func (o *TunnelServiceGetTunnelDefault) String() string {
	return fmt.Sprintf("[GET /tunnels/{name}][%d] TunnelService_GetTunnel default  %+v", o._statusCode, o.Payload)
}

func (o *TunnelServiceGetTunnelDefault) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *TunnelServiceGetTunnelDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
