// Code generated by go-swagger; DO NOT EDIT.

package tunnel_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/SilvanAbuse/guardllama/proto/gen/api/v1/swagger/models"
)

// TunnelServiceUpdateDNSFilteringEnabledReader is a Reader for the TunnelServiceUpdateDNSFilteringEnabled structure.
type TunnelServiceUpdateDNSFilteringEnabledReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TunnelServiceUpdateDNSFilteringEnabledReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTunnelServiceUpdateDNSFilteringEnabledOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewTunnelServiceUpdateDNSFilteringEnabledDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewTunnelServiceUpdateDNSFilteringEnabledOK creates a TunnelServiceUpdateDNSFilteringEnabledOK with default headers values
func NewTunnelServiceUpdateDNSFilteringEnabledOK() *TunnelServiceUpdateDNSFilteringEnabledOK {
	return &TunnelServiceUpdateDNSFilteringEnabledOK{}
}

/*
TunnelServiceUpdateDNSFilteringEnabledOK describes a response with status code 200, with default header values.

A successful response.
*/
type TunnelServiceUpdateDNSFilteringEnabledOK struct {
	Payload models.V1UpdateDNSFilteringEnabledResponse
}

// IsSuccess returns true when this tunnel service update Dns filtering enabled o k response has a 2xx status code
func (o *TunnelServiceUpdateDNSFilteringEnabledOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this tunnel service update Dns filtering enabled o k response has a 3xx status code
func (o *TunnelServiceUpdateDNSFilteringEnabledOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this tunnel service update Dns filtering enabled o k response has a 4xx status code
func (o *TunnelServiceUpdateDNSFilteringEnabledOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this tunnel service update Dns filtering enabled o k response has a 5xx status code
func (o *TunnelServiceUpdateDNSFilteringEnabledOK) IsServerError() bool {
	return false
}

// IsCode returns true when this tunnel service update Dns filtering enabled o k response a status code equal to that given
func (o *TunnelServiceUpdateDNSFilteringEnabledOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the tunnel service update Dns filtering enabled o k response
func (o *TunnelServiceUpdateDNSFilteringEnabledOK) Code() int {
	return 200
}

func (o *TunnelServiceUpdateDNSFilteringEnabledOK) Error() string {
	return fmt.Sprintf("[PUT /tunnels/{name}/dns_filtering_enabled][%d] tunnelServiceUpdateDnsFilteringEnabledOK  %+v", 200, o.Payload)
}

func (o *TunnelServiceUpdateDNSFilteringEnabledOK) String() string {
	return fmt.Sprintf("[PUT /tunnels/{name}/dns_filtering_enabled][%d] tunnelServiceUpdateDnsFilteringEnabledOK  %+v", 200, o.Payload)
}

func (o *TunnelServiceUpdateDNSFilteringEnabledOK) GetPayload() models.V1UpdateDNSFilteringEnabledResponse {
	return o.Payload
}

func (o *TunnelServiceUpdateDNSFilteringEnabledOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTunnelServiceUpdateDNSFilteringEnabledDefault creates a TunnelServiceUpdateDNSFilteringEnabledDefault with default headers values
func NewTunnelServiceUpdateDNSFilteringEnabledDefault(code int) *TunnelServiceUpdateDNSFilteringEnabledDefault {
	return &TunnelServiceUpdateDNSFilteringEnabledDefault{
		_statusCode: code,
	}
}

/*
TunnelServiceUpdateDNSFilteringEnabledDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type TunnelServiceUpdateDNSFilteringEnabledDefault struct {
	_statusCode int

	Payload *models.RPCStatus
}

// IsSuccess returns true when this tunnel service update DNS filtering enabled default response has a 2xx status code
func (o *TunnelServiceUpdateDNSFilteringEnabledDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this tunnel service update DNS filtering enabled default response has a 3xx status code
func (o *TunnelServiceUpdateDNSFilteringEnabledDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this tunnel service update DNS filtering enabled default response has a 4xx status code
func (o *TunnelServiceUpdateDNSFilteringEnabledDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this tunnel service update DNS filtering enabled default response has a 5xx status code
func (o *TunnelServiceUpdateDNSFilteringEnabledDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this tunnel service update DNS filtering enabled default response a status code equal to that given
func (o *TunnelServiceUpdateDNSFilteringEnabledDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the tunnel service update DNS filtering enabled default response
func (o *TunnelServiceUpdateDNSFilteringEnabledDefault) Code() int {
	return o._statusCode
}

func (o *TunnelServiceUpdateDNSFilteringEnabledDefault) Error() string {
	return fmt.Sprintf("[PUT /tunnels/{name}/dns_filtering_enabled][%d] TunnelService_UpdateDNSFilteringEnabled default  %+v", o._statusCode, o.Payload)
}

func (o *TunnelServiceUpdateDNSFilteringEnabledDefault) String() string {
	return fmt.Sprintf("[PUT /tunnels/{name}/dns_filtering_enabled][%d] TunnelService_UpdateDNSFilteringEnabled default  %+v", o._statusCode, o.Payload)
}

func (o *TunnelServiceUpdateDNSFilteringEnabledDefault) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *TunnelServiceUpdateDNSFilteringEnabledDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
TunnelServiceUpdateDNSFilteringEnabledBody tunnel service update DNS filtering enabled body
swagger:model TunnelServiceUpdateDNSFilteringEnabledBody
*/
type TunnelServiceUpdateDNSFilteringEnabledBody struct {

	// filtering enabled
	FilteringEnabled bool `json:"filtering_enabled,omitempty"`
}

// Validate validates this tunnel service update DNS filtering enabled body
func (o *TunnelServiceUpdateDNSFilteringEnabledBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this tunnel service update DNS filtering enabled body based on context it is used
func (o *TunnelServiceUpdateDNSFilteringEnabledBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *TunnelServiceUpdateDNSFilteringEnabledBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *TunnelServiceUpdateDNSFilteringEnabledBody) UnmarshalBinary(b []byte) error {
	var res TunnelServiceUpdateDNSFilteringEnabledBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
