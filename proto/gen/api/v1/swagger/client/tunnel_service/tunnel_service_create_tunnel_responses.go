// Code generated by go-swagger; DO NOT EDIT.

package tunnel_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/guardllamanet/guardllama/proto/gen/api/v1/swagger/models"
)

// TunnelServiceCreateTunnelReader is a Reader for the TunnelServiceCreateTunnel structure.
type TunnelServiceCreateTunnelReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TunnelServiceCreateTunnelReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTunnelServiceCreateTunnelOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewTunnelServiceCreateTunnelDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewTunnelServiceCreateTunnelOK creates a TunnelServiceCreateTunnelOK with default headers values
func NewTunnelServiceCreateTunnelOK() *TunnelServiceCreateTunnelOK {
	return &TunnelServiceCreateTunnelOK{}
}

/*
TunnelServiceCreateTunnelOK describes a response with status code 200, with default header values.

A successful response.
*/
type TunnelServiceCreateTunnelOK struct {
	Payload *models.V1CreateTunnelResponse
}

// IsSuccess returns true when this tunnel service create tunnel o k response has a 2xx status code
func (o *TunnelServiceCreateTunnelOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this tunnel service create tunnel o k response has a 3xx status code
func (o *TunnelServiceCreateTunnelOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this tunnel service create tunnel o k response has a 4xx status code
func (o *TunnelServiceCreateTunnelOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this tunnel service create tunnel o k response has a 5xx status code
func (o *TunnelServiceCreateTunnelOK) IsServerError() bool {
	return false
}

// IsCode returns true when this tunnel service create tunnel o k response a status code equal to that given
func (o *TunnelServiceCreateTunnelOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the tunnel service create tunnel o k response
func (o *TunnelServiceCreateTunnelOK) Code() int {
	return 200
}

func (o *TunnelServiceCreateTunnelOK) Error() string {
	return fmt.Sprintf("[POST /tunnels][%d] tunnelServiceCreateTunnelOK  %+v", 200, o.Payload)
}

func (o *TunnelServiceCreateTunnelOK) String() string {
	return fmt.Sprintf("[POST /tunnels][%d] tunnelServiceCreateTunnelOK  %+v", 200, o.Payload)
}

func (o *TunnelServiceCreateTunnelOK) GetPayload() *models.V1CreateTunnelResponse {
	return o.Payload
}

func (o *TunnelServiceCreateTunnelOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1CreateTunnelResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTunnelServiceCreateTunnelDefault creates a TunnelServiceCreateTunnelDefault with default headers values
func NewTunnelServiceCreateTunnelDefault(code int) *TunnelServiceCreateTunnelDefault {
	return &TunnelServiceCreateTunnelDefault{
		_statusCode: code,
	}
}

/*
TunnelServiceCreateTunnelDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type TunnelServiceCreateTunnelDefault struct {
	_statusCode int

	Payload *models.RPCStatus
}

// IsSuccess returns true when this tunnel service create tunnel default response has a 2xx status code
func (o *TunnelServiceCreateTunnelDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this tunnel service create tunnel default response has a 3xx status code
func (o *TunnelServiceCreateTunnelDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this tunnel service create tunnel default response has a 4xx status code
func (o *TunnelServiceCreateTunnelDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this tunnel service create tunnel default response has a 5xx status code
func (o *TunnelServiceCreateTunnelDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this tunnel service create tunnel default response a status code equal to that given
func (o *TunnelServiceCreateTunnelDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the tunnel service create tunnel default response
func (o *TunnelServiceCreateTunnelDefault) Code() int {
	return o._statusCode
}

func (o *TunnelServiceCreateTunnelDefault) Error() string {
	return fmt.Sprintf("[POST /tunnels][%d] TunnelService_CreateTunnel default  %+v", o._statusCode, o.Payload)
}

func (o *TunnelServiceCreateTunnelDefault) String() string {
	return fmt.Sprintf("[POST /tunnels][%d] TunnelService_CreateTunnel default  %+v", o._statusCode, o.Payload)
}

func (o *TunnelServiceCreateTunnelDefault) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *TunnelServiceCreateTunnelDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
