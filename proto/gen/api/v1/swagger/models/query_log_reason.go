// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// QueryLogReason - UNKNOWN: buf:lint:ignore ENUM_VALUE_PREFIX
// buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
//   - FILTERED_BLOCK_LIST: buf:lint:ignore ENUM_VALUE_PREFIX
//   - ALLOWED: buf:lint:ignore ENUM_VALUE_PREFIX
//
// swagger:model QueryLogReason
type QueryLogReason string

func NewQueryLogReason(value QueryLogReason) *QueryLogReason {
	return &value
}

// Pointer returns a pointer to a freshly-allocated QueryLogReason.
func (m QueryLogReason) Pointer() *QueryLogReason {
	return &m
}

const (

	// QueryLogReasonUNKNOWN captures enum value "UNKNOWN"
	QueryLogReasonUNKNOWN QueryLogReason = "UNKNOWN"

	// QueryLogReasonFILTEREDBLOCKLIST captures enum value "FILTERED_BLOCK_LIST"
	QueryLogReasonFILTEREDBLOCKLIST QueryLogReason = "FILTERED_BLOCK_LIST"

	// QueryLogReasonALLOWED captures enum value "ALLOWED"
	QueryLogReasonALLOWED QueryLogReason = "ALLOWED"
)

// for schema
var queryLogReasonEnum []interface{}

func init() {
	var res []QueryLogReason
	if err := json.Unmarshal([]byte(`["UNKNOWN","FILTERED_BLOCK_LIST","ALLOWED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		queryLogReasonEnum = append(queryLogReasonEnum, v)
	}
}

func (m QueryLogReason) validateQueryLogReasonEnum(path, location string, value QueryLogReason) error {
	if err := validate.EnumCase(path, location, value, queryLogReasonEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this query log reason
func (m QueryLogReason) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateQueryLogReasonEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this query log reason based on context it is used
func (m QueryLogReason) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
