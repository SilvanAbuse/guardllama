// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TunnelStatusState - PENDING: buf:lint:ignore ENUM_VALUE_PREFIX
// buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
//   - READY: buf:lint:ignore ENUM_VALUE_PREFIX
//   - ERROR: buf:lint:ignore ENUM_VALUE_PREFIX
//
// swagger:model TunnelStatusState
type TunnelStatusState string

func NewTunnelStatusState(value TunnelStatusState) *TunnelStatusState {
	return &value
}

// Pointer returns a pointer to a freshly-allocated TunnelStatusState.
func (m TunnelStatusState) Pointer() *TunnelStatusState {
	return &m
}

const (

	// TunnelStatusStatePENDING captures enum value "PENDING"
	TunnelStatusStatePENDING TunnelStatusState = "PENDING"

	// TunnelStatusStateREADY captures enum value "READY"
	TunnelStatusStateREADY TunnelStatusState = "READY"

	// TunnelStatusStateERROR captures enum value "ERROR"
	TunnelStatusStateERROR TunnelStatusState = "ERROR"
)

// for schema
var tunnelStatusStateEnum []interface{}

func init() {
	var res []TunnelStatusState
	if err := json.Unmarshal([]byte(`["PENDING","READY","ERROR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tunnelStatusStateEnum = append(tunnelStatusStateEnum, v)
	}
}

func (m TunnelStatusState) validateTunnelStatusStateEnum(path, location string, value TunnelStatusState) error {
	if err := validate.EnumCase(path, location, value, tunnelStatusStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this tunnel status state
func (m TunnelStatusState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTunnelStatusStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this tunnel status state based on context it is used
func (m TunnelStatusState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
