// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ImageImagePullPolicy - IfNotPresent: buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
// buf:lint:ignore ENUM_VALUE_PREFIX
// buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
//   - Always: buf:lint:ignore ENUM_VALUE_PREFIX
//
// buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
//   - Never: buf:lint:ignore ENUM_VALUE_PREFIX
//
// buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
//
// swagger:model ImageImagePullPolicy
type ImageImagePullPolicy string

func NewImageImagePullPolicy(value ImageImagePullPolicy) *ImageImagePullPolicy {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ImageImagePullPolicy.
func (m ImageImagePullPolicy) Pointer() *ImageImagePullPolicy {
	return &m
}

const (

	// ImageImagePullPolicyIfNotPresent captures enum value "IfNotPresent"
	ImageImagePullPolicyIfNotPresent ImageImagePullPolicy = "IfNotPresent"

	// ImageImagePullPolicyAlways captures enum value "Always"
	ImageImagePullPolicyAlways ImageImagePullPolicy = "Always"

	// ImageImagePullPolicyNever captures enum value "Never"
	ImageImagePullPolicyNever ImageImagePullPolicy = "Never"
)

// for schema
var imageImagePullPolicyEnum []interface{}

func init() {
	var res []ImageImagePullPolicy
	if err := json.Unmarshal([]byte(`["IfNotPresent","Always","Never"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		imageImagePullPolicyEnum = append(imageImagePullPolicyEnum, v)
	}
}

func (m ImageImagePullPolicy) validateImageImagePullPolicyEnum(path, location string, value ImageImagePullPolicy) error {
	if err := validate.EnumCase(path, location, value, imageImagePullPolicyEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this image image pull policy
func (m ImageImagePullPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateImageImagePullPolicyEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this image image pull policy based on context it is used
func (m ImageImagePullPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
