// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NodePortRangeProtocol - TCP: buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
// buf:lint:ignore ENUM_VALUE_PREFIX
//   - UDP: buf:lint:ignore ENUM_VALUE_PREFIX
//
// swagger:model NodePortRangeProtocol
type NodePortRangeProtocol string

func NewNodePortRangeProtocol(value NodePortRangeProtocol) *NodePortRangeProtocol {
	return &value
}

// Pointer returns a pointer to a freshly-allocated NodePortRangeProtocol.
func (m NodePortRangeProtocol) Pointer() *NodePortRangeProtocol {
	return &m
}

const (

	// NodePortRangeProtocolTCP captures enum value "TCP"
	NodePortRangeProtocolTCP NodePortRangeProtocol = "TCP"

	// NodePortRangeProtocolUDP captures enum value "UDP"
	NodePortRangeProtocolUDP NodePortRangeProtocol = "UDP"
)

// for schema
var nodePortRangeProtocolEnum []interface{}

func init() {
	var res []NodePortRangeProtocol
	if err := json.Unmarshal([]byte(`["TCP","UDP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nodePortRangeProtocolEnum = append(nodePortRangeProtocolEnum, v)
	}
}

func (m NodePortRangeProtocol) validateNodePortRangeProtocolEnum(path, location string, value NodePortRangeProtocol) error {
	if err := validate.EnumCase(path, location, value, nodePortRangeProtocolEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this node port range protocol
func (m NodePortRangeProtocol) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateNodePortRangeProtocolEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this node port range protocol based on context it is used
func (m NodePortRangeProtocol) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
