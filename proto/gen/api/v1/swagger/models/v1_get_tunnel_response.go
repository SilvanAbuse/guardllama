// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1GetTunnelResponse v1 get tunnel response
//
// swagger:model v1GetTunnelResponse
type V1GetTunnelResponse struct {

	// tunnel
	Tunnel *V1Tunnel `json:"tunnel,omitempty"`
}

// Validate validates this v1 get tunnel response
func (m *V1GetTunnelResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTunnel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1GetTunnelResponse) validateTunnel(formats strfmt.Registry) error {
	if swag.IsZero(m.Tunnel) { // not required
		return nil
	}

	if m.Tunnel != nil {
		if err := m.Tunnel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tunnel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tunnel")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 get tunnel response based on the context it is used
func (m *V1GetTunnelResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTunnel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1GetTunnelResponse) contextValidateTunnel(ctx context.Context, formats strfmt.Registry) error {

	if m.Tunnel != nil {
		if err := m.Tunnel.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tunnel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tunnel")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1GetTunnelResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1GetTunnelResponse) UnmarshalBinary(b []byte) error {
	var res V1GetTunnelResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
