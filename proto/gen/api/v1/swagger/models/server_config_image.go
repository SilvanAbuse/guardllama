// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ServerConfigImage server config image
//
// swagger:model ServerConfigImage
type ServerConfigImage struct {

	// image
	Image string `json:"image,omitempty"`

	// image pull policy
	ImagePullPolicy *ImageImagePullPolicy `json:"image_pull_policy,omitempty"`

	// image pull secret
	ImagePullSecret *ImageImagePullSecret `json:"image_pull_secret,omitempty"`
}

// Validate validates this server config image
func (m *ServerConfigImage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateImagePullPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImagePullSecret(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServerConfigImage) validateImagePullPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.ImagePullPolicy) { // not required
		return nil
	}

	if m.ImagePullPolicy != nil {
		if err := m.ImagePullPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("image_pull_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("image_pull_policy")
			}
			return err
		}
	}

	return nil
}

func (m *ServerConfigImage) validateImagePullSecret(formats strfmt.Registry) error {
	if swag.IsZero(m.ImagePullSecret) { // not required
		return nil
	}

	if m.ImagePullSecret != nil {
		if err := m.ImagePullSecret.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("image_pull_secret")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("image_pull_secret")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this server config image based on the context it is used
func (m *ServerConfigImage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateImagePullPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImagePullSecret(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServerConfigImage) contextValidateImagePullPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.ImagePullPolicy != nil {
		if err := m.ImagePullPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("image_pull_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("image_pull_policy")
			}
			return err
		}
	}

	return nil
}

func (m *ServerConfigImage) contextValidateImagePullSecret(ctx context.Context, formats strfmt.Registry) error {

	if m.ImagePullSecret != nil {
		if err := m.ImagePullSecret.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("image_pull_secret")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("image_pull_secret")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServerConfigImage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServerConfigImage) UnmarshalBinary(b []byte) error {
	var res ServerConfigImage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
