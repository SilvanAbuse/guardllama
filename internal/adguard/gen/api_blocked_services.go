/*
AdGuard Home

AdGuard Home REST-ish API.  Our admin web interface is built on top of this REST-ish API. 

API version: 0.107
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package adguard

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


type BlockedServicesApi interface {

	/*
	BlockedServicesAvailableServices Get available services to use for blocking

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return BlockedServicesApiBlockedServicesAvailableServicesRequest
	*/
	BlockedServicesAvailableServices(ctx context.Context) BlockedServicesApiBlockedServicesAvailableServicesRequest

	// BlockedServicesAvailableServicesExecute executes the request
	//  @return []string
	BlockedServicesAvailableServicesExecute(r BlockedServicesApiBlockedServicesAvailableServicesRequest) ([]string, *http.Response, error)

	/*
	BlockedServicesList Get blocked services list

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return BlockedServicesApiBlockedServicesListRequest
	*/
	BlockedServicesList(ctx context.Context) BlockedServicesApiBlockedServicesListRequest

	// BlockedServicesListExecute executes the request
	//  @return []string
	BlockedServicesListExecute(r BlockedServicesApiBlockedServicesListRequest) ([]string, *http.Response, error)

	/*
	BlockedServicesSet Set blocked services list

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return BlockedServicesApiBlockedServicesSetRequest
	*/
	BlockedServicesSet(ctx context.Context) BlockedServicesApiBlockedServicesSetRequest

	// BlockedServicesSetExecute executes the request
	BlockedServicesSetExecute(r BlockedServicesApiBlockedServicesSetRequest) (*http.Response, error)
}

// BlockedServicesApiService BlockedServicesApi service
type BlockedServicesApiService service

type BlockedServicesApiBlockedServicesAvailableServicesRequest struct {
	ctx context.Context
	ApiService BlockedServicesApi
}

func (r BlockedServicesApiBlockedServicesAvailableServicesRequest) Execute() ([]string, *http.Response, error) {
	return r.ApiService.BlockedServicesAvailableServicesExecute(r)
}

/*
BlockedServicesAvailableServices Get available services to use for blocking

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return BlockedServicesApiBlockedServicesAvailableServicesRequest
*/
func (a *BlockedServicesApiService) BlockedServicesAvailableServices(ctx context.Context) BlockedServicesApiBlockedServicesAvailableServicesRequest {
	return BlockedServicesApiBlockedServicesAvailableServicesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []string
func (a *BlockedServicesApiService) BlockedServicesAvailableServicesExecute(r BlockedServicesApiBlockedServicesAvailableServicesRequest) ([]string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockedServicesApiService.BlockedServicesAvailableServices")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/blocked_services/services"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BlockedServicesApiBlockedServicesListRequest struct {
	ctx context.Context
	ApiService BlockedServicesApi
}

func (r BlockedServicesApiBlockedServicesListRequest) Execute() ([]string, *http.Response, error) {
	return r.ApiService.BlockedServicesListExecute(r)
}

/*
BlockedServicesList Get blocked services list

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return BlockedServicesApiBlockedServicesListRequest
*/
func (a *BlockedServicesApiService) BlockedServicesList(ctx context.Context) BlockedServicesApiBlockedServicesListRequest {
	return BlockedServicesApiBlockedServicesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []string
func (a *BlockedServicesApiService) BlockedServicesListExecute(r BlockedServicesApiBlockedServicesListRequest) ([]string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockedServicesApiService.BlockedServicesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/blocked_services/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BlockedServicesApiBlockedServicesSetRequest struct {
	ctx context.Context
	ApiService BlockedServicesApi
	requestBody *[]string
}

func (r BlockedServicesApiBlockedServicesSetRequest) RequestBody(requestBody []string) BlockedServicesApiBlockedServicesSetRequest {
	r.requestBody = &requestBody
	return r
}

func (r BlockedServicesApiBlockedServicesSetRequest) Execute() (*http.Response, error) {
	return r.ApiService.BlockedServicesSetExecute(r)
}

/*
BlockedServicesSet Set blocked services list

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return BlockedServicesApiBlockedServicesSetRequest
*/
func (a *BlockedServicesApiService) BlockedServicesSet(ctx context.Context) BlockedServicesApiBlockedServicesSetRequest {
	return BlockedServicesApiBlockedServicesSetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *BlockedServicesApiService) BlockedServicesSetExecute(r BlockedServicesApiBlockedServicesSetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockedServicesApiService.BlockedServicesSet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/blocked_services/set"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
