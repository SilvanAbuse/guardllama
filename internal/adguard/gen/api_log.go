/*
AdGuard Home

AdGuard Home REST-ish API.  Our admin web interface is built on top of this REST-ish API. 

API version: 0.107
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package adguard

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


type LogApi interface {

	/*
	QueryLog Get DNS server query log.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return LogApiQueryLogRequest
	*/
	QueryLog(ctx context.Context) LogApiQueryLogRequest

	// QueryLogExecute executes the request
	//  @return QueryLog
	QueryLogExecute(r LogApiQueryLogRequest) (*QueryLog, *http.Response, error)

	/*
	QueryLogConfig Set query log parameters

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return LogApiQueryLogConfigRequest
	*/
	QueryLogConfig(ctx context.Context) LogApiQueryLogConfigRequest

	// QueryLogConfigExecute executes the request
	QueryLogConfigExecute(r LogApiQueryLogConfigRequest) (*http.Response, error)

	/*
	QueryLogInfo Get query log parameters

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return LogApiQueryLogInfoRequest
	*/
	QueryLogInfo(ctx context.Context) LogApiQueryLogInfoRequest

	// QueryLogInfoExecute executes the request
	//  @return QueryLogConfig
	QueryLogInfoExecute(r LogApiQueryLogInfoRequest) (*QueryLogConfig, *http.Response, error)

	/*
	QuerylogClear Clear query log

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return LogApiQuerylogClearRequest
	*/
	QuerylogClear(ctx context.Context) LogApiQuerylogClearRequest

	// QuerylogClearExecute executes the request
	QuerylogClearExecute(r LogApiQuerylogClearRequest) (*http.Response, error)
}

// LogApiService LogApi service
type LogApiService service

type LogApiQueryLogRequest struct {
	ctx context.Context
	ApiService LogApi
	olderThan *string
	offset *int32
	limit *int32
	search *string
	responseStatus *string
}

// Filter by older than
func (r LogApiQueryLogRequest) OlderThan(olderThan string) LogApiQueryLogRequest {
	r.olderThan = &olderThan
	return r
}

// Specify the ranking number of the first item on the page.  Even though it is possible to use \&quot;offset\&quot; and \&quot;older_than\&quot;, we recommend choosing one of them and sticking to it. 
func (r LogApiQueryLogRequest) Offset(offset int32) LogApiQueryLogRequest {
	r.offset = &offset
	return r
}

// Limit the number of records to be returned
func (r LogApiQueryLogRequest) Limit(limit int32) LogApiQueryLogRequest {
	r.limit = &limit
	return r
}

// Filter by domain name or client IP
func (r LogApiQueryLogRequest) Search(search string) LogApiQueryLogRequest {
	r.search = &search
	return r
}

// Filter by response status
func (r LogApiQueryLogRequest) ResponseStatus(responseStatus string) LogApiQueryLogRequest {
	r.responseStatus = &responseStatus
	return r
}

func (r LogApiQueryLogRequest) Execute() (*QueryLog, *http.Response, error) {
	return r.ApiService.QueryLogExecute(r)
}

/*
QueryLog Get DNS server query log.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LogApiQueryLogRequest
*/
func (a *LogApiService) QueryLog(ctx context.Context) LogApiQueryLogRequest {
	return LogApiQueryLogRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return QueryLog
func (a *LogApiService) QueryLogExecute(r LogApiQueryLogRequest) (*QueryLog, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *QueryLog
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogApiService.QueryLog")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/querylog"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.olderThan != nil {
		localVarQueryParams.Add("older_than", parameterToString(*r.olderThan, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	if r.responseStatus != nil {
		localVarQueryParams.Add("response_status", parameterToString(*r.responseStatus, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LogApiQueryLogConfigRequest struct {
	ctx context.Context
	ApiService LogApi
	queryLogConfig *QueryLogConfig
}

func (r LogApiQueryLogConfigRequest) QueryLogConfig(queryLogConfig QueryLogConfig) LogApiQueryLogConfigRequest {
	r.queryLogConfig = &queryLogConfig
	return r
}

func (r LogApiQueryLogConfigRequest) Execute() (*http.Response, error) {
	return r.ApiService.QueryLogConfigExecute(r)
}

/*
QueryLogConfig Set query log parameters

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LogApiQueryLogConfigRequest
*/
func (a *LogApiService) QueryLogConfig(ctx context.Context) LogApiQueryLogConfigRequest {
	return LogApiQueryLogConfigRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *LogApiService) QueryLogConfigExecute(r LogApiQueryLogConfigRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogApiService.QueryLogConfig")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/querylog_config"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.queryLogConfig
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type LogApiQueryLogInfoRequest struct {
	ctx context.Context
	ApiService LogApi
}

func (r LogApiQueryLogInfoRequest) Execute() (*QueryLogConfig, *http.Response, error) {
	return r.ApiService.QueryLogInfoExecute(r)
}

/*
QueryLogInfo Get query log parameters

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LogApiQueryLogInfoRequest
*/
func (a *LogApiService) QueryLogInfo(ctx context.Context) LogApiQueryLogInfoRequest {
	return LogApiQueryLogInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return QueryLogConfig
func (a *LogApiService) QueryLogInfoExecute(r LogApiQueryLogInfoRequest) (*QueryLogConfig, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *QueryLogConfig
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogApiService.QueryLogInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/querylog_info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LogApiQuerylogClearRequest struct {
	ctx context.Context
	ApiService LogApi
}

func (r LogApiQuerylogClearRequest) Execute() (*http.Response, error) {
	return r.ApiService.QuerylogClearExecute(r)
}

/*
QuerylogClear Clear query log

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LogApiQuerylogClearRequest
*/
func (a *LogApiService) QuerylogClear(ctx context.Context) LogApiQuerylogClearRequest {
	return LogApiQuerylogClearRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *LogApiService) QuerylogClearExecute(r LogApiQuerylogClearRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogApiService.QuerylogClear")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/querylog_clear"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
