/*
AdGuard Home

AdGuard Home REST-ish API.  Our admin web interface is built on top of this REST-ish API. 

API version: 0.107
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package adguard

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


type SafesearchApi interface {

	/*
	SafesearchDisable Disable safesearch

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SafesearchApiSafesearchDisableRequest
	*/
	SafesearchDisable(ctx context.Context) SafesearchApiSafesearchDisableRequest

	// SafesearchDisableExecute executes the request
	SafesearchDisableExecute(r SafesearchApiSafesearchDisableRequest) (*http.Response, error)

	/*
	SafesearchEnable Enable safesearch

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SafesearchApiSafesearchEnableRequest
	*/
	SafesearchEnable(ctx context.Context) SafesearchApiSafesearchEnableRequest

	// SafesearchEnableExecute executes the request
	SafesearchEnableExecute(r SafesearchApiSafesearchEnableRequest) (*http.Response, error)

	/*
	SafesearchStatus Get safesearch status

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SafesearchApiSafesearchStatusRequest
	*/
	SafesearchStatus(ctx context.Context) SafesearchApiSafesearchStatusRequest

	// SafesearchStatusExecute executes the request
	//  @return SafebrowsingStatus200Response
	SafesearchStatusExecute(r SafesearchApiSafesearchStatusRequest) (*SafebrowsingStatus200Response, *http.Response, error)
}

// SafesearchApiService SafesearchApi service
type SafesearchApiService service

type SafesearchApiSafesearchDisableRequest struct {
	ctx context.Context
	ApiService SafesearchApi
}

func (r SafesearchApiSafesearchDisableRequest) Execute() (*http.Response, error) {
	return r.ApiService.SafesearchDisableExecute(r)
}

/*
SafesearchDisable Disable safesearch

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SafesearchApiSafesearchDisableRequest
*/
func (a *SafesearchApiService) SafesearchDisable(ctx context.Context) SafesearchApiSafesearchDisableRequest {
	return SafesearchApiSafesearchDisableRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SafesearchApiService) SafesearchDisableExecute(r SafesearchApiSafesearchDisableRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SafesearchApiService.SafesearchDisable")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/safesearch/disable"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type SafesearchApiSafesearchEnableRequest struct {
	ctx context.Context
	ApiService SafesearchApi
}

func (r SafesearchApiSafesearchEnableRequest) Execute() (*http.Response, error) {
	return r.ApiService.SafesearchEnableExecute(r)
}

/*
SafesearchEnable Enable safesearch

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SafesearchApiSafesearchEnableRequest
*/
func (a *SafesearchApiService) SafesearchEnable(ctx context.Context) SafesearchApiSafesearchEnableRequest {
	return SafesearchApiSafesearchEnableRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SafesearchApiService) SafesearchEnableExecute(r SafesearchApiSafesearchEnableRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SafesearchApiService.SafesearchEnable")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/safesearch/enable"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type SafesearchApiSafesearchStatusRequest struct {
	ctx context.Context
	ApiService SafesearchApi
}

func (r SafesearchApiSafesearchStatusRequest) Execute() (*SafebrowsingStatus200Response, *http.Response, error) {
	return r.ApiService.SafesearchStatusExecute(r)
}

/*
SafesearchStatus Get safesearch status

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SafesearchApiSafesearchStatusRequest
*/
func (a *SafesearchApiService) SafesearchStatus(ctx context.Context) SafesearchApiSafesearchStatusRequest {
	return SafesearchApiSafesearchStatusRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SafebrowsingStatus200Response
func (a *SafesearchApiService) SafesearchStatusExecute(r SafesearchApiSafesearchStatusRequest) (*SafebrowsingStatus200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SafebrowsingStatus200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SafesearchApiService.SafesearchStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/safesearch/status"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
