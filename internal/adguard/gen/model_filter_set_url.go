/*
AdGuard Home

AdGuard Home REST-ish API.  Our admin web interface is built on top of this REST-ish API. 

API version: 0.107
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package adguard

import (
	"encoding/json"
)

// FilterSetUrl Filtering URL settings
type FilterSetUrl struct {
	Data *FilterSetUrlData `json:"data,omitempty"`
	Url *string `json:"url,omitempty"`
	Whitelist *bool `json:"whitelist,omitempty"`
}

// NewFilterSetUrl instantiates a new FilterSetUrl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilterSetUrl() *FilterSetUrl {
	this := FilterSetUrl{}
	return &this
}

// NewFilterSetUrlWithDefaults instantiates a new FilterSetUrl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterSetUrlWithDefaults() *FilterSetUrl {
	this := FilterSetUrl{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *FilterSetUrl) GetData() FilterSetUrlData {
	if o == nil || o.Data == nil {
		var ret FilterSetUrlData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterSetUrl) GetDataOk() (*FilterSetUrlData, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *FilterSetUrl) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given FilterSetUrlData and assigns it to the Data field.
func (o *FilterSetUrl) SetData(v FilterSetUrlData) {
	o.Data = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *FilterSetUrl) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterSetUrl) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *FilterSetUrl) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *FilterSetUrl) SetUrl(v string) {
	o.Url = &v
}

// GetWhitelist returns the Whitelist field value if set, zero value otherwise.
func (o *FilterSetUrl) GetWhitelist() bool {
	if o == nil || o.Whitelist == nil {
		var ret bool
		return ret
	}
	return *o.Whitelist
}

// GetWhitelistOk returns a tuple with the Whitelist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterSetUrl) GetWhitelistOk() (*bool, bool) {
	if o == nil || o.Whitelist == nil {
		return nil, false
	}
	return o.Whitelist, true
}

// HasWhitelist returns a boolean if a field has been set.
func (o *FilterSetUrl) HasWhitelist() bool {
	if o != nil && o.Whitelist != nil {
		return true
	}

	return false
}

// SetWhitelist gets a reference to the given bool and assigns it to the Whitelist field.
func (o *FilterSetUrl) SetWhitelist(v bool) {
	o.Whitelist = &v
}

func (o FilterSetUrl) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.Whitelist != nil {
		toSerialize["whitelist"] = o.Whitelist
	}
	return json.Marshal(toSerialize)
}

type NullableFilterSetUrl struct {
	value *FilterSetUrl
	isSet bool
}

func (v NullableFilterSetUrl) Get() *FilterSetUrl {
	return v.value
}

func (v *NullableFilterSetUrl) Set(val *FilterSetUrl) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterSetUrl) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterSetUrl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterSetUrl(val *FilterSetUrl) *NullableFilterSetUrl {
	return &NullableFilterSetUrl{value: val, isSet: true}
}

func (v NullableFilterSetUrl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterSetUrl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


