/*
AdGuard Home

AdGuard Home REST-ish API.  Our admin web interface is built on top of this REST-ish API. 

API version: 0.107
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package adguard

import (
	"encoding/json"
)

// ClientFindSubEntry Client information.
type ClientFindSubEntry struct {
	// Name
	Name *string `json:"name,omitempty"`
	// IP, CIDR, MAC, or ClientID.
	Ids []string `json:"ids,omitempty"`
	UseGlobalSettings *bool `json:"use_global_settings,omitempty"`
	FilteringEnabled *bool `json:"filtering_enabled,omitempty"`
	ParentalEnabled *bool `json:"parental_enabled,omitempty"`
	SafebrowsingEnabled *bool `json:"safebrowsing_enabled,omitempty"`
	SafesearchEnabled *bool `json:"safesearch_enabled,omitempty"`
	UseGlobalBlockedServices *bool `json:"use_global_blocked_services,omitempty"`
	BlockedServices []string `json:"blocked_services,omitempty"`
	Upstreams []string `json:"upstreams,omitempty"`
	WhoisInfo *map[string]string `json:"whois_info,omitempty"`
	// Whether the client's IP is blocked or not. 
	Disallowed *bool `json:"disallowed,omitempty"`
	// The rule due to which the client is disallowed.  If disallowed is set to true, and this string is empty, then the client IP is disallowed by the \"allowed IP list\", that is it is not included in the allowed list. 
	DisallowedRule *string `json:"disallowed_rule,omitempty"`
}

// NewClientFindSubEntry instantiates a new ClientFindSubEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClientFindSubEntry() *ClientFindSubEntry {
	this := ClientFindSubEntry{}
	return &this
}

// NewClientFindSubEntryWithDefaults instantiates a new ClientFindSubEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClientFindSubEntryWithDefaults() *ClientFindSubEntry {
	this := ClientFindSubEntry{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ClientFindSubEntry) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientFindSubEntry) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ClientFindSubEntry) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ClientFindSubEntry) SetName(v string) {
	o.Name = &v
}

// GetIds returns the Ids field value if set, zero value otherwise.
func (o *ClientFindSubEntry) GetIds() []string {
	if o == nil || o.Ids == nil {
		var ret []string
		return ret
	}
	return o.Ids
}

// GetIdsOk returns a tuple with the Ids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientFindSubEntry) GetIdsOk() ([]string, bool) {
	if o == nil || o.Ids == nil {
		return nil, false
	}
	return o.Ids, true
}

// HasIds returns a boolean if a field has been set.
func (o *ClientFindSubEntry) HasIds() bool {
	if o != nil && o.Ids != nil {
		return true
	}

	return false
}

// SetIds gets a reference to the given []string and assigns it to the Ids field.
func (o *ClientFindSubEntry) SetIds(v []string) {
	o.Ids = v
}

// GetUseGlobalSettings returns the UseGlobalSettings field value if set, zero value otherwise.
func (o *ClientFindSubEntry) GetUseGlobalSettings() bool {
	if o == nil || o.UseGlobalSettings == nil {
		var ret bool
		return ret
	}
	return *o.UseGlobalSettings
}

// GetUseGlobalSettingsOk returns a tuple with the UseGlobalSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientFindSubEntry) GetUseGlobalSettingsOk() (*bool, bool) {
	if o == nil || o.UseGlobalSettings == nil {
		return nil, false
	}
	return o.UseGlobalSettings, true
}

// HasUseGlobalSettings returns a boolean if a field has been set.
func (o *ClientFindSubEntry) HasUseGlobalSettings() bool {
	if o != nil && o.UseGlobalSettings != nil {
		return true
	}

	return false
}

// SetUseGlobalSettings gets a reference to the given bool and assigns it to the UseGlobalSettings field.
func (o *ClientFindSubEntry) SetUseGlobalSettings(v bool) {
	o.UseGlobalSettings = &v
}

// GetFilteringEnabled returns the FilteringEnabled field value if set, zero value otherwise.
func (o *ClientFindSubEntry) GetFilteringEnabled() bool {
	if o == nil || o.FilteringEnabled == nil {
		var ret bool
		return ret
	}
	return *o.FilteringEnabled
}

// GetFilteringEnabledOk returns a tuple with the FilteringEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientFindSubEntry) GetFilteringEnabledOk() (*bool, bool) {
	if o == nil || o.FilteringEnabled == nil {
		return nil, false
	}
	return o.FilteringEnabled, true
}

// HasFilteringEnabled returns a boolean if a field has been set.
func (o *ClientFindSubEntry) HasFilteringEnabled() bool {
	if o != nil && o.FilteringEnabled != nil {
		return true
	}

	return false
}

// SetFilteringEnabled gets a reference to the given bool and assigns it to the FilteringEnabled field.
func (o *ClientFindSubEntry) SetFilteringEnabled(v bool) {
	o.FilteringEnabled = &v
}

// GetParentalEnabled returns the ParentalEnabled field value if set, zero value otherwise.
func (o *ClientFindSubEntry) GetParentalEnabled() bool {
	if o == nil || o.ParentalEnabled == nil {
		var ret bool
		return ret
	}
	return *o.ParentalEnabled
}

// GetParentalEnabledOk returns a tuple with the ParentalEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientFindSubEntry) GetParentalEnabledOk() (*bool, bool) {
	if o == nil || o.ParentalEnabled == nil {
		return nil, false
	}
	return o.ParentalEnabled, true
}

// HasParentalEnabled returns a boolean if a field has been set.
func (o *ClientFindSubEntry) HasParentalEnabled() bool {
	if o != nil && o.ParentalEnabled != nil {
		return true
	}

	return false
}

// SetParentalEnabled gets a reference to the given bool and assigns it to the ParentalEnabled field.
func (o *ClientFindSubEntry) SetParentalEnabled(v bool) {
	o.ParentalEnabled = &v
}

// GetSafebrowsingEnabled returns the SafebrowsingEnabled field value if set, zero value otherwise.
func (o *ClientFindSubEntry) GetSafebrowsingEnabled() bool {
	if o == nil || o.SafebrowsingEnabled == nil {
		var ret bool
		return ret
	}
	return *o.SafebrowsingEnabled
}

// GetSafebrowsingEnabledOk returns a tuple with the SafebrowsingEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientFindSubEntry) GetSafebrowsingEnabledOk() (*bool, bool) {
	if o == nil || o.SafebrowsingEnabled == nil {
		return nil, false
	}
	return o.SafebrowsingEnabled, true
}

// HasSafebrowsingEnabled returns a boolean if a field has been set.
func (o *ClientFindSubEntry) HasSafebrowsingEnabled() bool {
	if o != nil && o.SafebrowsingEnabled != nil {
		return true
	}

	return false
}

// SetSafebrowsingEnabled gets a reference to the given bool and assigns it to the SafebrowsingEnabled field.
func (o *ClientFindSubEntry) SetSafebrowsingEnabled(v bool) {
	o.SafebrowsingEnabled = &v
}

// GetSafesearchEnabled returns the SafesearchEnabled field value if set, zero value otherwise.
func (o *ClientFindSubEntry) GetSafesearchEnabled() bool {
	if o == nil || o.SafesearchEnabled == nil {
		var ret bool
		return ret
	}
	return *o.SafesearchEnabled
}

// GetSafesearchEnabledOk returns a tuple with the SafesearchEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientFindSubEntry) GetSafesearchEnabledOk() (*bool, bool) {
	if o == nil || o.SafesearchEnabled == nil {
		return nil, false
	}
	return o.SafesearchEnabled, true
}

// HasSafesearchEnabled returns a boolean if a field has been set.
func (o *ClientFindSubEntry) HasSafesearchEnabled() bool {
	if o != nil && o.SafesearchEnabled != nil {
		return true
	}

	return false
}

// SetSafesearchEnabled gets a reference to the given bool and assigns it to the SafesearchEnabled field.
func (o *ClientFindSubEntry) SetSafesearchEnabled(v bool) {
	o.SafesearchEnabled = &v
}

// GetUseGlobalBlockedServices returns the UseGlobalBlockedServices field value if set, zero value otherwise.
func (o *ClientFindSubEntry) GetUseGlobalBlockedServices() bool {
	if o == nil || o.UseGlobalBlockedServices == nil {
		var ret bool
		return ret
	}
	return *o.UseGlobalBlockedServices
}

// GetUseGlobalBlockedServicesOk returns a tuple with the UseGlobalBlockedServices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientFindSubEntry) GetUseGlobalBlockedServicesOk() (*bool, bool) {
	if o == nil || o.UseGlobalBlockedServices == nil {
		return nil, false
	}
	return o.UseGlobalBlockedServices, true
}

// HasUseGlobalBlockedServices returns a boolean if a field has been set.
func (o *ClientFindSubEntry) HasUseGlobalBlockedServices() bool {
	if o != nil && o.UseGlobalBlockedServices != nil {
		return true
	}

	return false
}

// SetUseGlobalBlockedServices gets a reference to the given bool and assigns it to the UseGlobalBlockedServices field.
func (o *ClientFindSubEntry) SetUseGlobalBlockedServices(v bool) {
	o.UseGlobalBlockedServices = &v
}

// GetBlockedServices returns the BlockedServices field value if set, zero value otherwise.
func (o *ClientFindSubEntry) GetBlockedServices() []string {
	if o == nil || o.BlockedServices == nil {
		var ret []string
		return ret
	}
	return o.BlockedServices
}

// GetBlockedServicesOk returns a tuple with the BlockedServices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientFindSubEntry) GetBlockedServicesOk() ([]string, bool) {
	if o == nil || o.BlockedServices == nil {
		return nil, false
	}
	return o.BlockedServices, true
}

// HasBlockedServices returns a boolean if a field has been set.
func (o *ClientFindSubEntry) HasBlockedServices() bool {
	if o != nil && o.BlockedServices != nil {
		return true
	}

	return false
}

// SetBlockedServices gets a reference to the given []string and assigns it to the BlockedServices field.
func (o *ClientFindSubEntry) SetBlockedServices(v []string) {
	o.BlockedServices = v
}

// GetUpstreams returns the Upstreams field value if set, zero value otherwise.
func (o *ClientFindSubEntry) GetUpstreams() []string {
	if o == nil || o.Upstreams == nil {
		var ret []string
		return ret
	}
	return o.Upstreams
}

// GetUpstreamsOk returns a tuple with the Upstreams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientFindSubEntry) GetUpstreamsOk() ([]string, bool) {
	if o == nil || o.Upstreams == nil {
		return nil, false
	}
	return o.Upstreams, true
}

// HasUpstreams returns a boolean if a field has been set.
func (o *ClientFindSubEntry) HasUpstreams() bool {
	if o != nil && o.Upstreams != nil {
		return true
	}

	return false
}

// SetUpstreams gets a reference to the given []string and assigns it to the Upstreams field.
func (o *ClientFindSubEntry) SetUpstreams(v []string) {
	o.Upstreams = v
}

// GetWhoisInfo returns the WhoisInfo field value if set, zero value otherwise.
func (o *ClientFindSubEntry) GetWhoisInfo() map[string]string {
	if o == nil || o.WhoisInfo == nil {
		var ret map[string]string
		return ret
	}
	return *o.WhoisInfo
}

// GetWhoisInfoOk returns a tuple with the WhoisInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientFindSubEntry) GetWhoisInfoOk() (*map[string]string, bool) {
	if o == nil || o.WhoisInfo == nil {
		return nil, false
	}
	return o.WhoisInfo, true
}

// HasWhoisInfo returns a boolean if a field has been set.
func (o *ClientFindSubEntry) HasWhoisInfo() bool {
	if o != nil && o.WhoisInfo != nil {
		return true
	}

	return false
}

// SetWhoisInfo gets a reference to the given map[string]string and assigns it to the WhoisInfo field.
func (o *ClientFindSubEntry) SetWhoisInfo(v map[string]string) {
	o.WhoisInfo = &v
}

// GetDisallowed returns the Disallowed field value if set, zero value otherwise.
func (o *ClientFindSubEntry) GetDisallowed() bool {
	if o == nil || o.Disallowed == nil {
		var ret bool
		return ret
	}
	return *o.Disallowed
}

// GetDisallowedOk returns a tuple with the Disallowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientFindSubEntry) GetDisallowedOk() (*bool, bool) {
	if o == nil || o.Disallowed == nil {
		return nil, false
	}
	return o.Disallowed, true
}

// HasDisallowed returns a boolean if a field has been set.
func (o *ClientFindSubEntry) HasDisallowed() bool {
	if o != nil && o.Disallowed != nil {
		return true
	}

	return false
}

// SetDisallowed gets a reference to the given bool and assigns it to the Disallowed field.
func (o *ClientFindSubEntry) SetDisallowed(v bool) {
	o.Disallowed = &v
}

// GetDisallowedRule returns the DisallowedRule field value if set, zero value otherwise.
func (o *ClientFindSubEntry) GetDisallowedRule() string {
	if o == nil || o.DisallowedRule == nil {
		var ret string
		return ret
	}
	return *o.DisallowedRule
}

// GetDisallowedRuleOk returns a tuple with the DisallowedRule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientFindSubEntry) GetDisallowedRuleOk() (*string, bool) {
	if o == nil || o.DisallowedRule == nil {
		return nil, false
	}
	return o.DisallowedRule, true
}

// HasDisallowedRule returns a boolean if a field has been set.
func (o *ClientFindSubEntry) HasDisallowedRule() bool {
	if o != nil && o.DisallowedRule != nil {
		return true
	}

	return false
}

// SetDisallowedRule gets a reference to the given string and assigns it to the DisallowedRule field.
func (o *ClientFindSubEntry) SetDisallowedRule(v string) {
	o.DisallowedRule = &v
}

func (o ClientFindSubEntry) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Ids != nil {
		toSerialize["ids"] = o.Ids
	}
	if o.UseGlobalSettings != nil {
		toSerialize["use_global_settings"] = o.UseGlobalSettings
	}
	if o.FilteringEnabled != nil {
		toSerialize["filtering_enabled"] = o.FilteringEnabled
	}
	if o.ParentalEnabled != nil {
		toSerialize["parental_enabled"] = o.ParentalEnabled
	}
	if o.SafebrowsingEnabled != nil {
		toSerialize["safebrowsing_enabled"] = o.SafebrowsingEnabled
	}
	if o.SafesearchEnabled != nil {
		toSerialize["safesearch_enabled"] = o.SafesearchEnabled
	}
	if o.UseGlobalBlockedServices != nil {
		toSerialize["use_global_blocked_services"] = o.UseGlobalBlockedServices
	}
	if o.BlockedServices != nil {
		toSerialize["blocked_services"] = o.BlockedServices
	}
	if o.Upstreams != nil {
		toSerialize["upstreams"] = o.Upstreams
	}
	if o.WhoisInfo != nil {
		toSerialize["whois_info"] = o.WhoisInfo
	}
	if o.Disallowed != nil {
		toSerialize["disallowed"] = o.Disallowed
	}
	if o.DisallowedRule != nil {
		toSerialize["disallowed_rule"] = o.DisallowedRule
	}
	return json.Marshal(toSerialize)
}

type NullableClientFindSubEntry struct {
	value *ClientFindSubEntry
	isSet bool
}

func (v NullableClientFindSubEntry) Get() *ClientFindSubEntry {
	return v.value
}

func (v *NullableClientFindSubEntry) Set(val *ClientFindSubEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableClientFindSubEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableClientFindSubEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientFindSubEntry(val *ClientFindSubEntry) *NullableClientFindSubEntry {
	return &NullableClientFindSubEntry{value: val, isSet: true}
}

func (v NullableClientFindSubEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientFindSubEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


