/*
AdGuard Home

AdGuard Home REST-ish API.  Our admin web interface is built on top of this REST-ish API. 

API version: 0.107
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package adguard

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


type InstallApi interface {

	/*
	InstallCheckConfig Checks configuration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return InstallApiInstallCheckConfigRequest
	*/
	InstallCheckConfig(ctx context.Context) InstallApiInstallCheckConfigRequest

	// InstallCheckConfigExecute executes the request
	//  @return CheckConfigResponse
	InstallCheckConfigExecute(r InstallApiInstallCheckConfigRequest) (*CheckConfigResponse, *http.Response, error)

	/*
	InstallCheckConfigBeta 'UNSTABLE!: Checks configuration' 

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return InstallApiInstallCheckConfigBetaRequest
	*/
	InstallCheckConfigBeta(ctx context.Context) InstallApiInstallCheckConfigBetaRequest

	// InstallCheckConfigBetaExecute executes the request
	//  @return CheckConfigResponse
	InstallCheckConfigBetaExecute(r InstallApiInstallCheckConfigBetaRequest) (*CheckConfigResponse, *http.Response, error)

	/*
	InstallConfigure Applies the initial configuration.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return InstallApiInstallConfigureRequest
	*/
	InstallConfigure(ctx context.Context) InstallApiInstallConfigureRequest

	// InstallConfigureExecute executes the request
	InstallConfigureExecute(r InstallApiInstallConfigureRequest) (*http.Response, error)

	/*
	InstallConfigureBeta 'UNSTABLE!: Applies the initial configuration.' 

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return InstallApiInstallConfigureBetaRequest
	*/
	InstallConfigureBeta(ctx context.Context) InstallApiInstallConfigureBetaRequest

	// InstallConfigureBetaExecute executes the request
	InstallConfigureBetaExecute(r InstallApiInstallConfigureBetaRequest) (*http.Response, error)

	/*
	InstallGetAddresses Gets the network interfaces information.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return InstallApiInstallGetAddressesRequest
	*/
	InstallGetAddresses(ctx context.Context) InstallApiInstallGetAddressesRequest

	// InstallGetAddressesExecute executes the request
	//  @return AddressesInfo
	InstallGetAddressesExecute(r InstallApiInstallGetAddressesRequest) (*AddressesInfo, *http.Response, error)

	/*
	InstallGetAddressesBeta 'UNSTABLE!: Gets the network interfaces information.' 

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return InstallApiInstallGetAddressesBetaRequest
	*/
	InstallGetAddressesBeta(ctx context.Context) InstallApiInstallGetAddressesBetaRequest

	// InstallGetAddressesBetaExecute executes the request
	//  @return AddressesInfoBeta
	InstallGetAddressesBetaExecute(r InstallApiInstallGetAddressesBetaRequest) (*AddressesInfoBeta, *http.Response, error)
}

// InstallApiService InstallApi service
type InstallApiService service

type InstallApiInstallCheckConfigRequest struct {
	ctx context.Context
	ApiService InstallApi
	checkConfigRequest *CheckConfigRequest
}

// Configuration to be checked
func (r InstallApiInstallCheckConfigRequest) CheckConfigRequest(checkConfigRequest CheckConfigRequest) InstallApiInstallCheckConfigRequest {
	r.checkConfigRequest = &checkConfigRequest
	return r
}

func (r InstallApiInstallCheckConfigRequest) Execute() (*CheckConfigResponse, *http.Response, error) {
	return r.ApiService.InstallCheckConfigExecute(r)
}

/*
InstallCheckConfig Checks configuration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return InstallApiInstallCheckConfigRequest
*/
func (a *InstallApiService) InstallCheckConfig(ctx context.Context) InstallApiInstallCheckConfigRequest {
	return InstallApiInstallCheckConfigRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CheckConfigResponse
func (a *InstallApiService) InstallCheckConfigExecute(r InstallApiInstallCheckConfigRequest) (*CheckConfigResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CheckConfigResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstallApiService.InstallCheckConfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/install/check_config"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.checkConfigRequest == nil {
		return localVarReturnValue, nil, reportError("checkConfigRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.checkConfigRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type InstallApiInstallCheckConfigBetaRequest struct {
	ctx context.Context
	ApiService InstallApi
	checkConfigRequestBeta *CheckConfigRequestBeta
}

// Configuration to be checked
func (r InstallApiInstallCheckConfigBetaRequest) CheckConfigRequestBeta(checkConfigRequestBeta CheckConfigRequestBeta) InstallApiInstallCheckConfigBetaRequest {
	r.checkConfigRequestBeta = &checkConfigRequestBeta
	return r
}

func (r InstallApiInstallCheckConfigBetaRequest) Execute() (*CheckConfigResponse, *http.Response, error) {
	return r.ApiService.InstallCheckConfigBetaExecute(r)
}

/*
InstallCheckConfigBeta 'UNSTABLE!: Checks configuration' 

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return InstallApiInstallCheckConfigBetaRequest
*/
func (a *InstallApiService) InstallCheckConfigBeta(ctx context.Context) InstallApiInstallCheckConfigBetaRequest {
	return InstallApiInstallCheckConfigBetaRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CheckConfigResponse
func (a *InstallApiService) InstallCheckConfigBetaExecute(r InstallApiInstallCheckConfigBetaRequest) (*CheckConfigResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CheckConfigResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstallApiService.InstallCheckConfigBeta")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/install/check_config_beta"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.checkConfigRequestBeta == nil {
		return localVarReturnValue, nil, reportError("checkConfigRequestBeta is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.checkConfigRequestBeta
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type InstallApiInstallConfigureRequest struct {
	ctx context.Context
	ApiService InstallApi
	initialConfiguration *InitialConfiguration
}

// Initial configuration JSON
func (r InstallApiInstallConfigureRequest) InitialConfiguration(initialConfiguration InitialConfiguration) InstallApiInstallConfigureRequest {
	r.initialConfiguration = &initialConfiguration
	return r
}

func (r InstallApiInstallConfigureRequest) Execute() (*http.Response, error) {
	return r.ApiService.InstallConfigureExecute(r)
}

/*
InstallConfigure Applies the initial configuration.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return InstallApiInstallConfigureRequest
*/
func (a *InstallApiService) InstallConfigure(ctx context.Context) InstallApiInstallConfigureRequest {
	return InstallApiInstallConfigureRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *InstallApiService) InstallConfigureExecute(r InstallApiInstallConfigureRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstallApiService.InstallConfigure")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/install/configure"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.initialConfiguration == nil {
		return nil, reportError("initialConfiguration is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.initialConfiguration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type InstallApiInstallConfigureBetaRequest struct {
	ctx context.Context
	ApiService InstallApi
	initialConfigurationBeta *InitialConfigurationBeta
}

// Initial configuration JSON
func (r InstallApiInstallConfigureBetaRequest) InitialConfigurationBeta(initialConfigurationBeta InitialConfigurationBeta) InstallApiInstallConfigureBetaRequest {
	r.initialConfigurationBeta = &initialConfigurationBeta
	return r
}

func (r InstallApiInstallConfigureBetaRequest) Execute() (*http.Response, error) {
	return r.ApiService.InstallConfigureBetaExecute(r)
}

/*
InstallConfigureBeta 'UNSTABLE!: Applies the initial configuration.' 

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return InstallApiInstallConfigureBetaRequest
*/
func (a *InstallApiService) InstallConfigureBeta(ctx context.Context) InstallApiInstallConfigureBetaRequest {
	return InstallApiInstallConfigureBetaRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *InstallApiService) InstallConfigureBetaExecute(r InstallApiInstallConfigureBetaRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstallApiService.InstallConfigureBeta")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/install/configure_beta"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.initialConfigurationBeta == nil {
		return nil, reportError("initialConfigurationBeta is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.initialConfigurationBeta
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type InstallApiInstallGetAddressesRequest struct {
	ctx context.Context
	ApiService InstallApi
}

func (r InstallApiInstallGetAddressesRequest) Execute() (*AddressesInfo, *http.Response, error) {
	return r.ApiService.InstallGetAddressesExecute(r)
}

/*
InstallGetAddresses Gets the network interfaces information.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return InstallApiInstallGetAddressesRequest
*/
func (a *InstallApiService) InstallGetAddresses(ctx context.Context) InstallApiInstallGetAddressesRequest {
	return InstallApiInstallGetAddressesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AddressesInfo
func (a *InstallApiService) InstallGetAddressesExecute(r InstallApiInstallGetAddressesRequest) (*AddressesInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AddressesInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstallApiService.InstallGetAddresses")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/install/get_addresses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type InstallApiInstallGetAddressesBetaRequest struct {
	ctx context.Context
	ApiService InstallApi
}

func (r InstallApiInstallGetAddressesBetaRequest) Execute() (*AddressesInfoBeta, *http.Response, error) {
	return r.ApiService.InstallGetAddressesBetaExecute(r)
}

/*
InstallGetAddressesBeta 'UNSTABLE!: Gets the network interfaces information.' 

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return InstallApiInstallGetAddressesBetaRequest
*/
func (a *InstallApiService) InstallGetAddressesBeta(ctx context.Context) InstallApiInstallGetAddressesBetaRequest {
	return InstallApiInstallGetAddressesBetaRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AddressesInfoBeta
func (a *InstallApiService) InstallGetAddressesBetaExecute(r InstallApiInstallGetAddressesBetaRequest) (*AddressesInfoBeta, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AddressesInfoBeta
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstallApiService.InstallGetAddressesBeta")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/install/get_addresses_beta"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
