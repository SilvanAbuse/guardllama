/*
AdGuard Home

AdGuard Home REST-ish API.  Our admin web interface is built on top of this REST-ish API. 

API version: 0.107
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package adguard

import (
	"encoding/json"
)

// DNSConfig Query log configuration
type DNSConfig struct {
	// Bootstrap servers, port is optional after colon.  Empty value will reset it to default values. 
	BootstrapDns []string `json:"bootstrap_dns,omitempty"`
	// Upstream servers, port is optional after colon.  Empty value will reset it to default values. 
	UpstreamDns []string `json:"upstream_dns,omitempty"`
	UpstreamDnsFile *string `json:"upstream_dns_file,omitempty"`
	ProtectionEnabled *bool `json:"protection_enabled,omitempty"`
	DhcpAvailable *bool `json:"dhcp_available,omitempty"`
	Ratelimit *int32 `json:"ratelimit,omitempty"`
	BlockingMode *string `json:"blocking_mode,omitempty"`
	BlockingIpv4 *string `json:"blocking_ipv4,omitempty"`
	BlockingIpv6 *string `json:"blocking_ipv6,omitempty"`
	EdnsCsEnabled *bool `json:"edns_cs_enabled,omitempty"`
	DisableIpv6 *bool `json:"disable_ipv6,omitempty"`
	DnssecEnabled *bool `json:"dnssec_enabled,omitempty"`
	CacheSize *int32 `json:"cache_size,omitempty"`
	CacheTtlMin *int32 `json:"cache_ttl_min,omitempty"`
	CacheTtlMax *int32 `json:"cache_ttl_max,omitempty"`
	CacheOptimistic *bool `json:"cache_optimistic,omitempty"`
	UpstreamMode *string `json:"upstream_mode,omitempty"`
	UsePrivatePtrResolvers *bool `json:"use_private_ptr_resolvers,omitempty"`
	ResolveClients *bool `json:"resolve_clients,omitempty"`
	// Upstream servers, port is optional after colon.  Empty value will reset it to default values. 
	LocalPtrUpstreams []string `json:"local_ptr_upstreams,omitempty"`
}

// NewDNSConfig instantiates a new DNSConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDNSConfig() *DNSConfig {
	this := DNSConfig{}
	return &this
}

// NewDNSConfigWithDefaults instantiates a new DNSConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDNSConfigWithDefaults() *DNSConfig {
	this := DNSConfig{}
	return &this
}

// GetBootstrapDns returns the BootstrapDns field value if set, zero value otherwise.
func (o *DNSConfig) GetBootstrapDns() []string {
	if o == nil || o.BootstrapDns == nil {
		var ret []string
		return ret
	}
	return o.BootstrapDns
}

// GetBootstrapDnsOk returns a tuple with the BootstrapDns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSConfig) GetBootstrapDnsOk() ([]string, bool) {
	if o == nil || o.BootstrapDns == nil {
		return nil, false
	}
	return o.BootstrapDns, true
}

// HasBootstrapDns returns a boolean if a field has been set.
func (o *DNSConfig) HasBootstrapDns() bool {
	if o != nil && o.BootstrapDns != nil {
		return true
	}

	return false
}

// SetBootstrapDns gets a reference to the given []string and assigns it to the BootstrapDns field.
func (o *DNSConfig) SetBootstrapDns(v []string) {
	o.BootstrapDns = v
}

// GetUpstreamDns returns the UpstreamDns field value if set, zero value otherwise.
func (o *DNSConfig) GetUpstreamDns() []string {
	if o == nil || o.UpstreamDns == nil {
		var ret []string
		return ret
	}
	return o.UpstreamDns
}

// GetUpstreamDnsOk returns a tuple with the UpstreamDns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSConfig) GetUpstreamDnsOk() ([]string, bool) {
	if o == nil || o.UpstreamDns == nil {
		return nil, false
	}
	return o.UpstreamDns, true
}

// HasUpstreamDns returns a boolean if a field has been set.
func (o *DNSConfig) HasUpstreamDns() bool {
	if o != nil && o.UpstreamDns != nil {
		return true
	}

	return false
}

// SetUpstreamDns gets a reference to the given []string and assigns it to the UpstreamDns field.
func (o *DNSConfig) SetUpstreamDns(v []string) {
	o.UpstreamDns = v
}

// GetUpstreamDnsFile returns the UpstreamDnsFile field value if set, zero value otherwise.
func (o *DNSConfig) GetUpstreamDnsFile() string {
	if o == nil || o.UpstreamDnsFile == nil {
		var ret string
		return ret
	}
	return *o.UpstreamDnsFile
}

// GetUpstreamDnsFileOk returns a tuple with the UpstreamDnsFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSConfig) GetUpstreamDnsFileOk() (*string, bool) {
	if o == nil || o.UpstreamDnsFile == nil {
		return nil, false
	}
	return o.UpstreamDnsFile, true
}

// HasUpstreamDnsFile returns a boolean if a field has been set.
func (o *DNSConfig) HasUpstreamDnsFile() bool {
	if o != nil && o.UpstreamDnsFile != nil {
		return true
	}

	return false
}

// SetUpstreamDnsFile gets a reference to the given string and assigns it to the UpstreamDnsFile field.
func (o *DNSConfig) SetUpstreamDnsFile(v string) {
	o.UpstreamDnsFile = &v
}

// GetProtectionEnabled returns the ProtectionEnabled field value if set, zero value otherwise.
func (o *DNSConfig) GetProtectionEnabled() bool {
	if o == nil || o.ProtectionEnabled == nil {
		var ret bool
		return ret
	}
	return *o.ProtectionEnabled
}

// GetProtectionEnabledOk returns a tuple with the ProtectionEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSConfig) GetProtectionEnabledOk() (*bool, bool) {
	if o == nil || o.ProtectionEnabled == nil {
		return nil, false
	}
	return o.ProtectionEnabled, true
}

// HasProtectionEnabled returns a boolean if a field has been set.
func (o *DNSConfig) HasProtectionEnabled() bool {
	if o != nil && o.ProtectionEnabled != nil {
		return true
	}

	return false
}

// SetProtectionEnabled gets a reference to the given bool and assigns it to the ProtectionEnabled field.
func (o *DNSConfig) SetProtectionEnabled(v bool) {
	o.ProtectionEnabled = &v
}

// GetDhcpAvailable returns the DhcpAvailable field value if set, zero value otherwise.
func (o *DNSConfig) GetDhcpAvailable() bool {
	if o == nil || o.DhcpAvailable == nil {
		var ret bool
		return ret
	}
	return *o.DhcpAvailable
}

// GetDhcpAvailableOk returns a tuple with the DhcpAvailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSConfig) GetDhcpAvailableOk() (*bool, bool) {
	if o == nil || o.DhcpAvailable == nil {
		return nil, false
	}
	return o.DhcpAvailable, true
}

// HasDhcpAvailable returns a boolean if a field has been set.
func (o *DNSConfig) HasDhcpAvailable() bool {
	if o != nil && o.DhcpAvailable != nil {
		return true
	}

	return false
}

// SetDhcpAvailable gets a reference to the given bool and assigns it to the DhcpAvailable field.
func (o *DNSConfig) SetDhcpAvailable(v bool) {
	o.DhcpAvailable = &v
}

// GetRatelimit returns the Ratelimit field value if set, zero value otherwise.
func (o *DNSConfig) GetRatelimit() int32 {
	if o == nil || o.Ratelimit == nil {
		var ret int32
		return ret
	}
	return *o.Ratelimit
}

// GetRatelimitOk returns a tuple with the Ratelimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSConfig) GetRatelimitOk() (*int32, bool) {
	if o == nil || o.Ratelimit == nil {
		return nil, false
	}
	return o.Ratelimit, true
}

// HasRatelimit returns a boolean if a field has been set.
func (o *DNSConfig) HasRatelimit() bool {
	if o != nil && o.Ratelimit != nil {
		return true
	}

	return false
}

// SetRatelimit gets a reference to the given int32 and assigns it to the Ratelimit field.
func (o *DNSConfig) SetRatelimit(v int32) {
	o.Ratelimit = &v
}

// GetBlockingMode returns the BlockingMode field value if set, zero value otherwise.
func (o *DNSConfig) GetBlockingMode() string {
	if o == nil || o.BlockingMode == nil {
		var ret string
		return ret
	}
	return *o.BlockingMode
}

// GetBlockingModeOk returns a tuple with the BlockingMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSConfig) GetBlockingModeOk() (*string, bool) {
	if o == nil || o.BlockingMode == nil {
		return nil, false
	}
	return o.BlockingMode, true
}

// HasBlockingMode returns a boolean if a field has been set.
func (o *DNSConfig) HasBlockingMode() bool {
	if o != nil && o.BlockingMode != nil {
		return true
	}

	return false
}

// SetBlockingMode gets a reference to the given string and assigns it to the BlockingMode field.
func (o *DNSConfig) SetBlockingMode(v string) {
	o.BlockingMode = &v
}

// GetBlockingIpv4 returns the BlockingIpv4 field value if set, zero value otherwise.
func (o *DNSConfig) GetBlockingIpv4() string {
	if o == nil || o.BlockingIpv4 == nil {
		var ret string
		return ret
	}
	return *o.BlockingIpv4
}

// GetBlockingIpv4Ok returns a tuple with the BlockingIpv4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSConfig) GetBlockingIpv4Ok() (*string, bool) {
	if o == nil || o.BlockingIpv4 == nil {
		return nil, false
	}
	return o.BlockingIpv4, true
}

// HasBlockingIpv4 returns a boolean if a field has been set.
func (o *DNSConfig) HasBlockingIpv4() bool {
	if o != nil && o.BlockingIpv4 != nil {
		return true
	}

	return false
}

// SetBlockingIpv4 gets a reference to the given string and assigns it to the BlockingIpv4 field.
func (o *DNSConfig) SetBlockingIpv4(v string) {
	o.BlockingIpv4 = &v
}

// GetBlockingIpv6 returns the BlockingIpv6 field value if set, zero value otherwise.
func (o *DNSConfig) GetBlockingIpv6() string {
	if o == nil || o.BlockingIpv6 == nil {
		var ret string
		return ret
	}
	return *o.BlockingIpv6
}

// GetBlockingIpv6Ok returns a tuple with the BlockingIpv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSConfig) GetBlockingIpv6Ok() (*string, bool) {
	if o == nil || o.BlockingIpv6 == nil {
		return nil, false
	}
	return o.BlockingIpv6, true
}

// HasBlockingIpv6 returns a boolean if a field has been set.
func (o *DNSConfig) HasBlockingIpv6() bool {
	if o != nil && o.BlockingIpv6 != nil {
		return true
	}

	return false
}

// SetBlockingIpv6 gets a reference to the given string and assigns it to the BlockingIpv6 field.
func (o *DNSConfig) SetBlockingIpv6(v string) {
	o.BlockingIpv6 = &v
}

// GetEdnsCsEnabled returns the EdnsCsEnabled field value if set, zero value otherwise.
func (o *DNSConfig) GetEdnsCsEnabled() bool {
	if o == nil || o.EdnsCsEnabled == nil {
		var ret bool
		return ret
	}
	return *o.EdnsCsEnabled
}

// GetEdnsCsEnabledOk returns a tuple with the EdnsCsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSConfig) GetEdnsCsEnabledOk() (*bool, bool) {
	if o == nil || o.EdnsCsEnabled == nil {
		return nil, false
	}
	return o.EdnsCsEnabled, true
}

// HasEdnsCsEnabled returns a boolean if a field has been set.
func (o *DNSConfig) HasEdnsCsEnabled() bool {
	if o != nil && o.EdnsCsEnabled != nil {
		return true
	}

	return false
}

// SetEdnsCsEnabled gets a reference to the given bool and assigns it to the EdnsCsEnabled field.
func (o *DNSConfig) SetEdnsCsEnabled(v bool) {
	o.EdnsCsEnabled = &v
}

// GetDisableIpv6 returns the DisableIpv6 field value if set, zero value otherwise.
func (o *DNSConfig) GetDisableIpv6() bool {
	if o == nil || o.DisableIpv6 == nil {
		var ret bool
		return ret
	}
	return *o.DisableIpv6
}

// GetDisableIpv6Ok returns a tuple with the DisableIpv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSConfig) GetDisableIpv6Ok() (*bool, bool) {
	if o == nil || o.DisableIpv6 == nil {
		return nil, false
	}
	return o.DisableIpv6, true
}

// HasDisableIpv6 returns a boolean if a field has been set.
func (o *DNSConfig) HasDisableIpv6() bool {
	if o != nil && o.DisableIpv6 != nil {
		return true
	}

	return false
}

// SetDisableIpv6 gets a reference to the given bool and assigns it to the DisableIpv6 field.
func (o *DNSConfig) SetDisableIpv6(v bool) {
	o.DisableIpv6 = &v
}

// GetDnssecEnabled returns the DnssecEnabled field value if set, zero value otherwise.
func (o *DNSConfig) GetDnssecEnabled() bool {
	if o == nil || o.DnssecEnabled == nil {
		var ret bool
		return ret
	}
	return *o.DnssecEnabled
}

// GetDnssecEnabledOk returns a tuple with the DnssecEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSConfig) GetDnssecEnabledOk() (*bool, bool) {
	if o == nil || o.DnssecEnabled == nil {
		return nil, false
	}
	return o.DnssecEnabled, true
}

// HasDnssecEnabled returns a boolean if a field has been set.
func (o *DNSConfig) HasDnssecEnabled() bool {
	if o != nil && o.DnssecEnabled != nil {
		return true
	}

	return false
}

// SetDnssecEnabled gets a reference to the given bool and assigns it to the DnssecEnabled field.
func (o *DNSConfig) SetDnssecEnabled(v bool) {
	o.DnssecEnabled = &v
}

// GetCacheSize returns the CacheSize field value if set, zero value otherwise.
func (o *DNSConfig) GetCacheSize() int32 {
	if o == nil || o.CacheSize == nil {
		var ret int32
		return ret
	}
	return *o.CacheSize
}

// GetCacheSizeOk returns a tuple with the CacheSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSConfig) GetCacheSizeOk() (*int32, bool) {
	if o == nil || o.CacheSize == nil {
		return nil, false
	}
	return o.CacheSize, true
}

// HasCacheSize returns a boolean if a field has been set.
func (o *DNSConfig) HasCacheSize() bool {
	if o != nil && o.CacheSize != nil {
		return true
	}

	return false
}

// SetCacheSize gets a reference to the given int32 and assigns it to the CacheSize field.
func (o *DNSConfig) SetCacheSize(v int32) {
	o.CacheSize = &v
}

// GetCacheTtlMin returns the CacheTtlMin field value if set, zero value otherwise.
func (o *DNSConfig) GetCacheTtlMin() int32 {
	if o == nil || o.CacheTtlMin == nil {
		var ret int32
		return ret
	}
	return *o.CacheTtlMin
}

// GetCacheTtlMinOk returns a tuple with the CacheTtlMin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSConfig) GetCacheTtlMinOk() (*int32, bool) {
	if o == nil || o.CacheTtlMin == nil {
		return nil, false
	}
	return o.CacheTtlMin, true
}

// HasCacheTtlMin returns a boolean if a field has been set.
func (o *DNSConfig) HasCacheTtlMin() bool {
	if o != nil && o.CacheTtlMin != nil {
		return true
	}

	return false
}

// SetCacheTtlMin gets a reference to the given int32 and assigns it to the CacheTtlMin field.
func (o *DNSConfig) SetCacheTtlMin(v int32) {
	o.CacheTtlMin = &v
}

// GetCacheTtlMax returns the CacheTtlMax field value if set, zero value otherwise.
func (o *DNSConfig) GetCacheTtlMax() int32 {
	if o == nil || o.CacheTtlMax == nil {
		var ret int32
		return ret
	}
	return *o.CacheTtlMax
}

// GetCacheTtlMaxOk returns a tuple with the CacheTtlMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSConfig) GetCacheTtlMaxOk() (*int32, bool) {
	if o == nil || o.CacheTtlMax == nil {
		return nil, false
	}
	return o.CacheTtlMax, true
}

// HasCacheTtlMax returns a boolean if a field has been set.
func (o *DNSConfig) HasCacheTtlMax() bool {
	if o != nil && o.CacheTtlMax != nil {
		return true
	}

	return false
}

// SetCacheTtlMax gets a reference to the given int32 and assigns it to the CacheTtlMax field.
func (o *DNSConfig) SetCacheTtlMax(v int32) {
	o.CacheTtlMax = &v
}

// GetCacheOptimistic returns the CacheOptimistic field value if set, zero value otherwise.
func (o *DNSConfig) GetCacheOptimistic() bool {
	if o == nil || o.CacheOptimistic == nil {
		var ret bool
		return ret
	}
	return *o.CacheOptimistic
}

// GetCacheOptimisticOk returns a tuple with the CacheOptimistic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSConfig) GetCacheOptimisticOk() (*bool, bool) {
	if o == nil || o.CacheOptimistic == nil {
		return nil, false
	}
	return o.CacheOptimistic, true
}

// HasCacheOptimistic returns a boolean if a field has been set.
func (o *DNSConfig) HasCacheOptimistic() bool {
	if o != nil && o.CacheOptimistic != nil {
		return true
	}

	return false
}

// SetCacheOptimistic gets a reference to the given bool and assigns it to the CacheOptimistic field.
func (o *DNSConfig) SetCacheOptimistic(v bool) {
	o.CacheOptimistic = &v
}

// GetUpstreamMode returns the UpstreamMode field value if set, zero value otherwise.
func (o *DNSConfig) GetUpstreamMode() string {
	if o == nil || o.UpstreamMode == nil {
		var ret string
		return ret
	}
	return *o.UpstreamMode
}

// GetUpstreamModeOk returns a tuple with the UpstreamMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSConfig) GetUpstreamModeOk() (*string, bool) {
	if o == nil || o.UpstreamMode == nil {
		return nil, false
	}
	return o.UpstreamMode, true
}

// HasUpstreamMode returns a boolean if a field has been set.
func (o *DNSConfig) HasUpstreamMode() bool {
	if o != nil && o.UpstreamMode != nil {
		return true
	}

	return false
}

// SetUpstreamMode gets a reference to the given string and assigns it to the UpstreamMode field.
func (o *DNSConfig) SetUpstreamMode(v string) {
	o.UpstreamMode = &v
}

// GetUsePrivatePtrResolvers returns the UsePrivatePtrResolvers field value if set, zero value otherwise.
func (o *DNSConfig) GetUsePrivatePtrResolvers() bool {
	if o == nil || o.UsePrivatePtrResolvers == nil {
		var ret bool
		return ret
	}
	return *o.UsePrivatePtrResolvers
}

// GetUsePrivatePtrResolversOk returns a tuple with the UsePrivatePtrResolvers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSConfig) GetUsePrivatePtrResolversOk() (*bool, bool) {
	if o == nil || o.UsePrivatePtrResolvers == nil {
		return nil, false
	}
	return o.UsePrivatePtrResolvers, true
}

// HasUsePrivatePtrResolvers returns a boolean if a field has been set.
func (o *DNSConfig) HasUsePrivatePtrResolvers() bool {
	if o != nil && o.UsePrivatePtrResolvers != nil {
		return true
	}

	return false
}

// SetUsePrivatePtrResolvers gets a reference to the given bool and assigns it to the UsePrivatePtrResolvers field.
func (o *DNSConfig) SetUsePrivatePtrResolvers(v bool) {
	o.UsePrivatePtrResolvers = &v
}

// GetResolveClients returns the ResolveClients field value if set, zero value otherwise.
func (o *DNSConfig) GetResolveClients() bool {
	if o == nil || o.ResolveClients == nil {
		var ret bool
		return ret
	}
	return *o.ResolveClients
}

// GetResolveClientsOk returns a tuple with the ResolveClients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSConfig) GetResolveClientsOk() (*bool, bool) {
	if o == nil || o.ResolveClients == nil {
		return nil, false
	}
	return o.ResolveClients, true
}

// HasResolveClients returns a boolean if a field has been set.
func (o *DNSConfig) HasResolveClients() bool {
	if o != nil && o.ResolveClients != nil {
		return true
	}

	return false
}

// SetResolveClients gets a reference to the given bool and assigns it to the ResolveClients field.
func (o *DNSConfig) SetResolveClients(v bool) {
	o.ResolveClients = &v
}

// GetLocalPtrUpstreams returns the LocalPtrUpstreams field value if set, zero value otherwise.
func (o *DNSConfig) GetLocalPtrUpstreams() []string {
	if o == nil || o.LocalPtrUpstreams == nil {
		var ret []string
		return ret
	}
	return o.LocalPtrUpstreams
}

// GetLocalPtrUpstreamsOk returns a tuple with the LocalPtrUpstreams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSConfig) GetLocalPtrUpstreamsOk() ([]string, bool) {
	if o == nil || o.LocalPtrUpstreams == nil {
		return nil, false
	}
	return o.LocalPtrUpstreams, true
}

// HasLocalPtrUpstreams returns a boolean if a field has been set.
func (o *DNSConfig) HasLocalPtrUpstreams() bool {
	if o != nil && o.LocalPtrUpstreams != nil {
		return true
	}

	return false
}

// SetLocalPtrUpstreams gets a reference to the given []string and assigns it to the LocalPtrUpstreams field.
func (o *DNSConfig) SetLocalPtrUpstreams(v []string) {
	o.LocalPtrUpstreams = v
}

func (o DNSConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BootstrapDns != nil {
		toSerialize["bootstrap_dns"] = o.BootstrapDns
	}
	if o.UpstreamDns != nil {
		toSerialize["upstream_dns"] = o.UpstreamDns
	}
	if o.UpstreamDnsFile != nil {
		toSerialize["upstream_dns_file"] = o.UpstreamDnsFile
	}
	if o.ProtectionEnabled != nil {
		toSerialize["protection_enabled"] = o.ProtectionEnabled
	}
	if o.DhcpAvailable != nil {
		toSerialize["dhcp_available"] = o.DhcpAvailable
	}
	if o.Ratelimit != nil {
		toSerialize["ratelimit"] = o.Ratelimit
	}
	if o.BlockingMode != nil {
		toSerialize["blocking_mode"] = o.BlockingMode
	}
	if o.BlockingIpv4 != nil {
		toSerialize["blocking_ipv4"] = o.BlockingIpv4
	}
	if o.BlockingIpv6 != nil {
		toSerialize["blocking_ipv6"] = o.BlockingIpv6
	}
	if o.EdnsCsEnabled != nil {
		toSerialize["edns_cs_enabled"] = o.EdnsCsEnabled
	}
	if o.DisableIpv6 != nil {
		toSerialize["disable_ipv6"] = o.DisableIpv6
	}
	if o.DnssecEnabled != nil {
		toSerialize["dnssec_enabled"] = o.DnssecEnabled
	}
	if o.CacheSize != nil {
		toSerialize["cache_size"] = o.CacheSize
	}
	if o.CacheTtlMin != nil {
		toSerialize["cache_ttl_min"] = o.CacheTtlMin
	}
	if o.CacheTtlMax != nil {
		toSerialize["cache_ttl_max"] = o.CacheTtlMax
	}
	if o.CacheOptimistic != nil {
		toSerialize["cache_optimistic"] = o.CacheOptimistic
	}
	if o.UpstreamMode != nil {
		toSerialize["upstream_mode"] = o.UpstreamMode
	}
	if o.UsePrivatePtrResolvers != nil {
		toSerialize["use_private_ptr_resolvers"] = o.UsePrivatePtrResolvers
	}
	if o.ResolveClients != nil {
		toSerialize["resolve_clients"] = o.ResolveClients
	}
	if o.LocalPtrUpstreams != nil {
		toSerialize["local_ptr_upstreams"] = o.LocalPtrUpstreams
	}
	return json.Marshal(toSerialize)
}

type NullableDNSConfig struct {
	value *DNSConfig
	isSet bool
}

func (v NullableDNSConfig) Get() *DNSConfig {
	return v.value
}

func (v *NullableDNSConfig) Set(val *DNSConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableDNSConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableDNSConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDNSConfig(val *DNSConfig) *NullableDNSConfig {
	return &NullableDNSConfig{value: val, isSet: true}
}

func (v NullableDNSConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDNSConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


