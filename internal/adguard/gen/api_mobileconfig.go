/*
AdGuard Home

AdGuard Home REST-ish API.  Our admin web interface is built on top of this REST-ish API. 

API version: 0.107
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package adguard

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


type MobileconfigApi interface {

	/*
	MobileConfigDoH Get DNS over HTTPS .mobileconfig.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return MobileconfigApiMobileConfigDoHRequest
	*/
	MobileConfigDoH(ctx context.Context) MobileconfigApiMobileConfigDoHRequest

	// MobileConfigDoHExecute executes the request
	MobileConfigDoHExecute(r MobileconfigApiMobileConfigDoHRequest) (*http.Response, error)

	/*
	MobileConfigDoT Get DNS over TLS .mobileconfig.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return MobileconfigApiMobileConfigDoTRequest
	*/
	MobileConfigDoT(ctx context.Context) MobileconfigApiMobileConfigDoTRequest

	// MobileConfigDoTExecute executes the request
	MobileConfigDoTExecute(r MobileconfigApiMobileConfigDoTRequest) (*http.Response, error)
}

// MobileconfigApiService MobileconfigApi service
type MobileconfigApiService service

type MobileconfigApiMobileConfigDoHRequest struct {
	ctx context.Context
	ApiService MobileconfigApi
	host *string
	clientId *string
}

// Host for which the config is generated.  If no host is provided, &#x60;tls.server_name&#x60; from the configuration file is used.  If &#x60;tls.server_name&#x60; is not set, the API returns an error with a 500 status. 
func (r MobileconfigApiMobileConfigDoHRequest) Host(host string) MobileconfigApiMobileConfigDoHRequest {
	r.host = &host
	return r
}

// ClientID. 
func (r MobileconfigApiMobileConfigDoHRequest) ClientId(clientId string) MobileconfigApiMobileConfigDoHRequest {
	r.clientId = &clientId
	return r
}

func (r MobileconfigApiMobileConfigDoHRequest) Execute() (*http.Response, error) {
	return r.ApiService.MobileConfigDoHExecute(r)
}

/*
MobileConfigDoH Get DNS over HTTPS .mobileconfig.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MobileconfigApiMobileConfigDoHRequest
*/
func (a *MobileconfigApiService) MobileConfigDoH(ctx context.Context) MobileconfigApiMobileConfigDoHRequest {
	return MobileconfigApiMobileConfigDoHRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *MobileconfigApiService) MobileConfigDoHExecute(r MobileconfigApiMobileConfigDoHRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MobileconfigApiService.MobileConfigDoH")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apple/doh.mobileconfig"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.host == nil {
		return nil, reportError("host is required and must be specified")
	}

	localVarQueryParams.Add("host", parameterToString(*r.host, ""))
	if r.clientId != nil {
		localVarQueryParams.Add("client_id", parameterToString(*r.clientId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type MobileconfigApiMobileConfigDoTRequest struct {
	ctx context.Context
	ApiService MobileconfigApi
	host *string
	clientId *string
}

// Host for which the config is generated.  If no host is provided, &#x60;tls.server_name&#x60; from the configuration file is used.  If &#x60;tls.server_name&#x60; is not set, the API returns an error with a 500 status. 
func (r MobileconfigApiMobileConfigDoTRequest) Host(host string) MobileconfigApiMobileConfigDoTRequest {
	r.host = &host
	return r
}

// ClientID. 
func (r MobileconfigApiMobileConfigDoTRequest) ClientId(clientId string) MobileconfigApiMobileConfigDoTRequest {
	r.clientId = &clientId
	return r
}

func (r MobileconfigApiMobileConfigDoTRequest) Execute() (*http.Response, error) {
	return r.ApiService.MobileConfigDoTExecute(r)
}

/*
MobileConfigDoT Get DNS over TLS .mobileconfig.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MobileconfigApiMobileConfigDoTRequest
*/
func (a *MobileconfigApiService) MobileConfigDoT(ctx context.Context) MobileconfigApiMobileConfigDoTRequest {
	return MobileconfigApiMobileConfigDoTRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *MobileconfigApiService) MobileConfigDoTExecute(r MobileconfigApiMobileConfigDoTRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MobileconfigApiService.MobileConfigDoT")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apple/dot.mobileconfig"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.host == nil {
		return nil, reportError("host is required and must be specified")
	}

	localVarQueryParams.Add("host", parameterToString(*r.host, ""))
	if r.clientId != nil {
		localVarQueryParams.Add("client_id", parameterToString(*r.clientId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
